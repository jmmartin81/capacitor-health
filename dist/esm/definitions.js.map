{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface HealthPlugin {\n  /**\n   * Checks if health API is available.\n   * Android: If false is returned, the Google Health Connect app is probably not installed.\n   * See showHealthConnectInPlayStore()\n   *\n   */\n  isHealthAvailable(): Promise<{ available: boolean }>;\n\n  /**\n   * Android only: Returns for each given permission, if it was granted by the underlying health API\n   * @param permissions permissions to query\n   */\n  checkHealthPermissions(permissions: PermissionsRequest): Promise<PermissionResponse>;\n\n  /**\n   * Requests the permissions from the user.\n   *\n   * Android: Apps can ask only a few times for permissions, after that the user has to grant them manually in\n   * the Health Connect app. See openHealthConnectSettings()\n   *\n   * iOS: If the permissions are already granted or denied, this method will just return without asking the user. In iOS\n   * we can't really detect if a user granted or denied a permission. The return value reflects the assumption that all\n   * permissions were granted.\n   *\n   * @param permissions permissions to request\n   */\n  requestHealthPermissions(permissions: PermissionsRequest): Promise<PermissionResponse>;\n\n  /**\n   * Opens the apps settings, which is kind of wrong, because health permissions are configured under:\n   * Settings > Apps > (Apple) Health > Access and Devices > [app-name]\n   * But we can't go there directly.\n   */\n  openAppleHealthSettings(): Promise<void>;\n\n  /**\n   * Opens the Google Health Connect app\n   */\n  openHealthConnectSettings(): Promise<void>;\n\n  /**\n   * Opens the Google Health Connect app in PlayStore\n   */\n  showHealthConnectInPlayStore(): Promise<void>;\n\n  /**\n   * Query aggregated data\n   * @param request\n   */\n  queryAggregated(request: QueryAggregatedRequest): Promise<QueryAggregatedResponse>;\n\n  /**\n   * Query workouts\n   * @param request\n   */\n  queryWorkouts(request: QueryWorkoutRequest): Promise<QueryWorkoutResponse>;\n\n  /**\n   * NEW: Query granular samples data with minute/second precision\n   * @param request\n   */\n  querySamples(request: QuerySamplesRequest): Promise<QuerySamplesResponse>;\n}\n\nexport declare type HealthPermission =\n  | 'READ_STEPS'\n  | 'READ_WORKOUTS'\n  | 'READ_ACTIVE_CALORIES'\n  | 'READ_TOTAL_CALORIES'\n  | 'READ_DISTANCE'\n  | 'READ_HEART_RATE'\n  | 'READ_ROUTE'\n  | 'READ_MINDFULNESS';\n\nexport interface PermissionsRequest {\n  permissions: HealthPermission[];\n}\n\nexport interface PermissionResponse {\n  permissions: { [key: string]: boolean }[];\n}\n\nexport interface QueryWorkoutRequest {\n  startDate: string;\n  endDate: string;\n  includeHeartRate: boolean;\n  includeRoute: boolean;\n  includeSteps: boolean;\n}\n\nexport interface HeartRateSample {\n  timestamp: string;\n  bpm: number;\n}\n\nexport interface RouteSample {\n  timestamp: string;\n  lat: number;\n  lng: number;\n  alt?: number;\n}\n\nexport interface QueryWorkoutResponse {\n  workouts: Workout[];\n}\n\nexport interface Workout {\n  startDate: string;\n  endDate: string;\n  workoutType: string;\n  sourceName: string;\n  id?: string;\n  duration: number;\n  distance?: number;\n  steps?: number;\n  calories: number;\n  sourceBundleId: string;\n  route?: RouteSample[];\n  heartRate?: HeartRateSample[];\n}\n\nexport interface QueryAggregatedRequest {\n  startDate: string;\n  endDate: string;\n  dataType: 'steps' | 'active-calories' | 'mindfulness';\n  bucket: string;\n}\n\nexport interface QueryAggregatedResponse {\n  aggregatedData: AggregatedSample[];\n}\n\nexport interface AggregatedSample {\n  startDate: string;\n  endDate: string;\n  value: number;\n}\n\n// NEW: Types for granular samples query\nexport interface QuerySamplesRequest {\n  dataType: HealthSampleType;\n  startDate: string;\n  endDate: string;\n  limit?: number;\n  unit?: string;\n}\n\nexport interface QuerySamplesResponse {\n  samples: Sample[];\n}\n\nexport interface Sample {\n  value: number;\n  unit: string;\n  startDate: string;\n  endDate: string;\n  dataType: HealthSampleType;\n  source?: string;\n  device?: string;\n  uuid?: string; // iOS specific\n}\n\nexport declare type HealthSampleType =\n  | 'steps'\n  | 'heartRate'\n  | 'activeEnergyBurned'\n  | 'distanceWalkingRunning'\n  | 'bloodGlucose'\n  | 'oxygenSaturation'\n  | 'restingHeartRate'\n  | 'respiratoryRate'\n  | 'bodyMass'\n  | 'bodyFatPercentage'\n  | 'bloodPressureSystolic'\n  | 'bloodPressureDiastolic';"]}